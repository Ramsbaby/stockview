buildscript {
    apply plugin: 'java'
    apply plugin: 'java-library'

    ext {
        springBootVersion = '2.7.5'
    }
    repositories {
        maven{url "https://plugins.gradle.org/m2/"}
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
    }
}

subprojects {
    group = 'com.ramsbaby'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "org.asciidoctor.jvm.convert"

    configurations {
        asciidoctorExtensions
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    ext {
        snippetsDir = file("build/generated-snippets")
    }

    dependencies {

        api 'org.springframework.boot:spring-boot-starter-data-jpa'
        api 'org.springframework.boot:spring-boot-starter-web'
        api 'org.springframework.boot:spring-boot-starter-webflux'
        api 'org.springframework.boot:spring-boot-starter-validation'

        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

        runtimeOnly 'com.h2database:h2'

        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    }

    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
    }

    //spring rest docs setting
    asciidoctor {
        inputs.dir snippetsDir
        configurations 'asciidoctorExtensions'
        dependsOn test
    }

    asciidoctor.doFirst {
        delete file('src/main/resources/static/docs')
    }

    task copyDocument(type: Copy) {
        dependsOn asciidoctor
        from file("build/docs/asciidoc")
        into file("src/main/resources/static/docs")
    }

    build {
        dependsOn copyDocument
    }

    bootJar {
        dependsOn asciidoctor
        from("${asciidoctor.outputDir}/html5") {
            into 'static/docs'
        }
    }
}